#!/usr/bin/env ruby
require 'fileutils'

# Progressive DevOps Setup Script
# Implements automated environment setup with risk awareness

APP_ROOT = File.expand_path('..', __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

def check_dependencies
  puts "== Checking dependencies =="

  dependencies = {
    'Ruby' => 'ruby --version',
    'PostgreSQL' => 'postgres --version',
    'Redis' => 'redis-server --version',
    'Node.js' => 'node --version',
    'Yarn' => 'yarn --version',
    'tmux' => 'tmux -V'
  }

  missing = []
  dependencies.each do |name, command|
    print "  Checking #{name}... "
    if system("#{command} > /dev/null 2>&1")
      puts "✓"
    else
      puts "✗"
      missing << name
    end
  end

  if missing.any?
    puts "\n⚠️  Missing dependencies: #{missing.join(', ')}"
    puts "Please install missing dependencies before continuing."
    exit 1
  end
end

def assess_environment_risk
  puts "\n== Assessing Environment Risk =="

  risks = []

  # Check for production credentials
  if File.exist?('.env.production')
    risks << { level: :high, message: "Production credentials detected in .env.production" }
  end

  # Check for uncommitted changes
  if system('git diff --quiet')
    puts "  Git working directory: clean ✓"
  else
    risks << { level: :medium, message: "Uncommitted changes detected" }
  end

  # Check disk space
  available = `df -BG . | tail -1 | awk '{print $4}'`.to_i
  if available < 5
    risks << { level: :high, message: "Low disk space: #{available}GB available" }
  end

  # Check memory
  if RUBY_PLATFORM =~ /darwin/
    free_memory = `vm_stat | grep 'Pages free' | awk '{print $3}'`.to_i * 4096 / 1024 / 1024
  else
    free_memory = `free -m | grep Mem | awk '{print $4}'`.to_i
  end

  if free_memory < 1000
    risks << { level: :medium, message: "Low memory: #{free_memory}MB free" }
  end

  if risks.empty?
    puts "  All checks passed ✓"
  else
    puts "\n⚠️  Risks detected:"
    risks.each do |risk|
      icon = risk[:level] == :high ? "🔴" : "🟡"
      puts "  #{icon} #{risk[:message]}"
    end

    if risks.any? { |r| r[:level] == :high }
      print "\nHigh risks detected. Continue anyway? (y/n) "
      response = gets.chomp
      exit 1 unless response.downcase == 'y'
    end
  end
end

FileUtils.chdir APP_ROOT do
  puts "== Agentic Rails Setup =="
  puts "Combining concepts from 5 essential books\n\n"

  check_dependencies
  assess_environment_risk

  puts "\n== Installing dependencies =="
  system! 'gem install bundler --conservative'
  system('bundle check') || system!('bundle install')

  puts "\n== Installing JavaScript dependencies =="
  system!('yarn install')

  puts "\n== Preparing database =="
  system! 'bin/rails db:prepare'

  puts "\n== Setting up development environment =="

  # Create .env file if it doesn't exist
  unless File.exist?('.env')
    puts "  Creating .env file..."
    File.write('.env', <<~ENV)
      # Development Environment Variables
      RAILS_ENV=development
      DATABASE_PASSWORD=
      REDIS_URL=redis://localhost:6379/0
      RISK_THRESHOLD=0.5
      SLOW_QUERY_THRESHOLD=50
      RAILS_MAX_THREADS=5
    ENV
  end

  # Setup tmux configuration
  if system('which tmux > /dev/null 2>&1')
    puts "  Setting up tmux configuration..."
    system! 'cp .tmux.conf ~/.tmux.conf.agentic-rails'
    puts "  Tmux config saved to ~/.tmux.conf.agentic-rails"
    puts "  To use: tmux source-file ~/.tmux.conf.agentic-rails"
  end

  # Initialize git hooks
  puts "\n== Setting up git hooks =="
  system! 'bin/progressive-commit init'

  # Run initial tests
  puts "\n== Running initial tests =="
  system! 'bin/rails test'

  puts "\n== Removing old logs and tempfiles =="
  system! 'bin/rails log:clear tmp:clear'

  puts "\n== Setup Summary =="
  puts "✓ Dependencies installed"
  puts "✓ Database configured"
  puts "✓ Environment variables set"
  puts "✓ tmux configuration available"
  puts "✓ Progressive Commit Protocol initialized"
  puts "✓ Tests passing"

  puts "\n🚀 Setup complete! Next steps:"
  puts "1. Start tmux: tmux new-session -s agentic-rails"
  puts "2. Load dev layout: tmux source-file .tmux/dev-layout.conf"
  puts "3. Start server: bin/rails server"
  puts "4. Run tests: bin/rails test"
  puts "5. Monitor performance: bin/monitor"

  puts "\n📚 Combining wisdom from:"
  puts "  • Agile Web Development with Rails 7.2"
  puts "  • tmux 3: Productive Mouse-Free Development"
  puts "  • DevOps in Practice"
  puts "  • Rails Scales!"
  puts "  • Risk-First Software Development"
end