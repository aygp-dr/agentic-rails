version: '3.8'

x-app: &app
  build:
    context: .
    dockerfile: Dockerfile
    args:
      RUBY_VERSION: '3.3.0'
      NODE_VERSION: '20'
      BUNDLER_VERSION: '2.5.3'
  environment: &env
    NODE_ENV: ${NODE_ENV:-development}
    RAILS_ENV: ${RAILS_ENV:-development}
  image: agentic-rails:latest
  tmpfs:
    - /tmp
    - /app/tmp/pids

x-backend: &backend
  <<: *app
  stdin_open: true
  tty: true
  volumes:
    - .:/app:cached
    - bundle:/usr/local/bundle
    - rails_cache:/app/tmp/cache
    - node_modules:/app/node_modules
    - history:/usr/local/hist
    - ./.dockerdev/.bashrc:/root/.bashrc:ro
    - ./.dockerdev/.pryrc:/root/.pryrc:ro
  environment:
    <<: *env
    DATABASE_URL: postgres://postgres:postgres@postgres:5432/agentic_rails_${RAILS_ENV:-development}
    REDIS_URL: redis://redis:6379/
    WEBPACKER_DEV_SERVER_HOST: webpacker
    BOOTSNAP_CACHE_DIR: /usr/local/bundle/bootsnap
    XDG_DATA_HOME: /app/tmp/cache
    HISTFILE: /usr/local/hist/.bash_history
    IRB_HISTFILE: /usr/local/hist/.irb_history
    EDITOR: vi
    MALLOC_ARENA_MAX: 2
    WEB_CONCURRENCY: ${WEB_CONCURRENCY:-1}
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  rails:
    <<: *backend
    command: bundle exec rails server -b 0.0.0.0
    ports:
      - '3000:3000'

  sidekiq:
    <<: *backend
    command: bundle exec sidekiq -C config/sidekiq.yml

  postgres:
    image: postgres:15
    volumes:
      - postgres:/var/lib/postgresql/data
      - history:/usr/local/hist
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      PSQL_HISTFILE: /usr/local/hist/.psql_history
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - redis:/data
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  webpacker:
    <<: *backend
    command: ./bin/webpack-dev-server
    ports:
      - '3035:3035'
    environment:
      <<: *env
      WEBPACKER_DEV_SERVER_HOST: 0.0.0.0

  # Development tools
  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - '1080:1080'
      - '1025:1025'

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - '9090:9090'
    depends_on:
      - rails

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - '3001:3000'
    depends_on:
      - prometheus

  # Testing support
  selenium:
    image: selenium/standalone-chrome:latest
    ports:
      - '4444:4444'
      - '7900:7900'
    shm_size: '2gb'

  # Alternative: Use this for running everything in one container
  app:
    <<: *backend
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails server -b 0.0.0.0"
    ports:
      - '3000:3000'
    profiles:
      - simple

volumes:
  postgres:
  redis:
  bundle:
  node_modules:
  rails_cache:
  history:
  prometheus:
  grafana: